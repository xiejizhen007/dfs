syntax = "proto3";

package protos.grpc;

import "chunk_server.proto";

service ChunkServerFileService {
    // master call
    rpc InitFileChunk(InitFileChunkRequest) returns(InitFileChunkRespond) {}

    // client or other chunkserver call
    rpc ReadFileChunk(ReadFileChunkRequest) returns(ReadFileChunkRespond) {}

    // client call
    rpc WriteFileChunk(WriteFileChunkRequest) returns(WriteFileChunkRespond) {}

    // 客户端调用该接口，将待写入数据及其校验和发送至块服务器
    rpc SendChunkData(SendChunkDataRequest) returns(SendChunkDataRespond) {}

    // 由主副本服务器调用，在它将数据写入到数据写入到本地后
    // 调用该接口，通知其他副本服务器应用数据写入
    rpc ApplyMutation(ApplyMutationRequest) returns(ApplyMutationRespond) {}

    // 主服务器调用该接口，修改副本服务器数据块版本
    rpc AdjustFileChunkVersion(AdjustFileChunkVersionRequest) returns(AdjustFileChunkVersionRespond) {}
}

message InitFileChunkRequest {
    string chunk_handle = 1;
}

message InitFileChunkRespond {
    InitFileChunkRequest request = 1;

    enum InitFileChunkStatus {
        UNKNOW = 0;
        CREATED = 1;
        ALREADY_EXISTS = 2;
    };

    InitFileChunkStatus status = 2;
}

message ReadFileChunkRequest {
    string chunk_handle = 1;

    uint32 version = 2;

    uint32 offset = 3;

    uint32 length = 4;
}

message ReadFileChunkRespond {
    ReadFileChunkRequest request = 1;

    bytes data = 2;

    uint32 read_length = 3;

    enum ReadFileChunkRespondStatus {
        UNKNOW = 0;
        OK = 1;
        NOT_FOUND = 2;
        OUT_OF_RANGE = 3;
        VERSION_ERROR = 4;
    };

    ReadFileChunkRespondStatus status = 4;
}

enum FileChunkMutationStatus {
    UNKNOW = 0;
    OK = 1;
    NOT_FOUND = 2;
    OUT_OF_RANGE = 3;
    VERSION_ERROR = 4;
};

message WriteFileChunkRequestHeader {
    string chunk_handle = 1;

    uint32 version = 2;

    uint32 offset = 3;

    uint32 length = 4;

    bytes data = 5;

    bytes checksum = 6;
}

message WriteFileChunkRequest {
    WriteFileChunkRequestHeader header = 1;

    // The location of the chunkserver where this special chunk is located
    repeated ChunkServerLocation locations = 2;
}

message WriteFileChunkRespond {
    WriteFileChunkRequest request = 1;

    uint32 write_length = 2;

    FileChunkMutationStatus status = 3;
}

message SendChunkDataRequest {
    bytes checksum = 1;

    bytes data = 2;
}

message SendChunkDataRespond {
    SendChunkDataRequest request = 1;

    enum SendChunkDataStatus {
        UNKNOW = 0;
        OK = 1;
        DATA_TOO_BIG = 2;
        BAD_DATA = 3;
    };

    SendChunkDataStatus status = 2;
}

message ApplyMutationRequest {
    WriteFileChunkRequestHeader headers = 1;
}

message ApplyMutationRespond {
    ApplyMutationRequest request = 1;

    FileChunkMutationStatus status = 2;
}


message AdjustFileChunkVersionRequest {
    string chunk_handle = 1;
    // 将 chunk_handle 对应数据块的版本设置为该值
    uint32 new_chunk_version = 2;
}

message AdjustFileChunkVersionRespond {
    AdjustFileChunkVersionRequest request = 1;

    enum AdjustFileChunkVersionRespondStatus {
        UNKNOW = 0;
        // 修改版本成功
        OK = 1;
        // 未找到对应 chunk_handle 对应得数据块
        FAILED_NOT_FOUND = 2;
        // 版本不同步
        FAILED_VERSION_NOT_SYNC = 3;
    };

    AdjustFileChunkVersionRespondStatus status = 2;
    // 应该与请求中的 new_chunk_version 相对应
    uint32 chunk_version = 3;
}